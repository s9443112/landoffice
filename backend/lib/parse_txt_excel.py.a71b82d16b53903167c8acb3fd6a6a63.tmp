from fpdf import FPDF
from os import listdir
from os.path import isfile, isdir, join, exists
import openpyxl
import datetime
import numpy as np
from copy import copy
from backend import models


def copy_sheet(source_sheet, target_sheet):
    # copy all the cel values and styles
    copy_cells(source_sheet, target_sheet)
    copy_sheet_attributes(source_sheet, target_sheet)


def copy_sheet_attributes(source_sheet, target_sheet):
    target_sheet.sheet_format = copy(source_sheet.sheet_format)
    target_sheet.sheet_properties = copy(source_sheet.sheet_properties)
    target_sheet.merged_cells = copy(source_sheet.merged_cells)
    target_sheet.page_margins = copy(source_sheet.page_margins)
    target_sheet.freeze_panes = copy(source_sheet.freeze_panes)
    # set row dimensions
    # So you cannot copy the row_dimensions attribute. Does not work (because of meta data in the attribute I think). So we copy every row's row_dimensions. That seems to work.
    for rn in range(len(source_sheet.row_dimensions)):
        target_sheet.row_dimensions[rn] = copy(source_sheet.row_dimensions[rn])
    if source_sheet.sheet_format.defaultColWidth is None:
        print('Unable to copy default column wide')
    else:
        target_sheet.sheet_format.defaultColWidth = copy(
            source_sheet.sheet_format.defaultColWidth)
    # set specific column width and hidden property
    # we cannot copy the entire column_dimensions attribute so we copy selected attributes
    for key, value in source_sheet.column_dimensions.items():
        # Excel actually groups multiple columns under 1 key. Use the min max attribute to also group the columns in the targetSheet
        target_sheet.column_dimensions[key].min = copy(
            source_sheet.column_dimensions[key].min)
        # https://stackoverflow.com/questions/36417278/openpyxl-can-not-read-consecutive-hidden-columns discussed the issue. Note that this is also the case for the width, not onl;y the hidden property
        target_sheet.column_dimensions[key].max = copy(
            source_sheet.column_dimensions[key].max)
        target_sheet.column_dimensions[key].width = copy(
            source_sheet.column_dimensions[key].width)  # set width for every column
        target_sheet.column_dimensions[key].hidden = copy(
            source_sheet.column_dimensions[key].hidden)


def copy_cells(source_sheet, target_sheet):
    for (row, col), source_cell in source_sheet._cells.items():
        target_cell = target_sheet.cell(column=col, row=row)
        target_cell._value = source_cell._value
        target_cell.data_type = source_cell.data_type
        if source_cell.has_style:
            target_cell.font = copy(source_cell.font)
            target_cell.border = copy(source_cell.border)
            target_cell.fill = copy(source_cell.fill)
            target_cell.number_format = copy(source_cell.number_format)
            target_cell.protection = copy(source_cell.protection)
            target_cell.alignment = copy(source_cell.alignment)
        if source_cell.hyperlink:
            target_cell._hyperlink = copy(source_cell.hyperlink)
        if source_cell.comment:
            target_cell.comment = copy(source_cell.comment)


class StartParseExcel():
    def __init__(self):
        self.ouput_path = "./output"
        self.fileName = ''

    def find_context(self, target):

        target = "["+target+"]"
        f = open(self.fileName, encoding="utf-8")
        text = f.read()
        f.close
        index = text.find(target) + len(target)
        text_ = text[index:]
        index2 = text_.find("[")
        if index2 == -1:
            return text[index+1:]
        return text[index+1:index2+index-1]

    def main(self):
        folders = listdir(self.ouput_path)
        workbook = openpyxl.load_workbook('tester_new.xlsx')
        sheet_b = workbook['標示部']
        sheet2_b = workbook['所有權部']
        sheet3_b = workbook['權利部']

        workbook2 = openpyxl.Workbook()
        workbook2.create_sheet('標示部')
        workbook2.create_sheet('所有權部')
        workbook2.create_sheet('權利部')

        sheet = workbook2['標示部']
        sheet2 = workbook2['所有權部']
        sheet3 = workbook2['權利部']

        try:
            copy_sheet(sheet_b, sheet)
            copy_sheet(sheet2_b, sheet2)
            copy_sheet(sheet3_b, sheet3)
        except Exception as e:
            print(e)

        start_row_sheet1 = 2
        start_row_sheet2 = 2
        start_row_sheet3 = 2

        MarkingDepartments = models.MarkingDepartment.objects.all()

        for each in MarkingDepartments:
            pdf.add_page()
            pdf.cell(200, 10, txt="＊＊＊　　建物標示部　　＊＊＊",
                     ln=1, align="C")
            pdf.cell(200, 10, txt=each.sheet1+" " + each.sheet2 + " " +
                                     each.sheet3+"   建號 "+each.sheet4, ln=2, align="C")
